---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Zino Lath.
--- DateTime: 18/07/2021 01:01
---
LoadImageGroupFromFile("checkmark", "THlib\\menu\\assets\\checkmark.png",true, 2, 1,0,0,false)
local m = lstg.menu
m.options = {}
local M = m.options
M.name = "options"
M.obj_list = {}
local t = lstg.text.menu
local t_ids = {"res","windowed","vsync","apply","usebosstheme","loweffect","se_volume","bgm_volume","set_key","return"}
if #lstg.lang_table > 1 then
    table.insert(t_ids,9,'language')
end
M.selected = 1
M.resolutions = {
    {320, 240},
    {640, 480},
    {800, 600},
    {960, 720},
    {1024, 768},
    {1280, 960},
}
M.backup_set = setting
M.submenus = {}
M.submenus.language = {}
for _, v in ipairs(t_ids) do
    M.submenus[v] = {}
end

function M.update()
    M.backup_set = setting
    for id, text in ipairs(t_ids) do
        M.obj_list[id] = New(M.option,text,id)
    end
    task.Wait(40)
    while(true)do
        if(m.key.up) then
            PlaySound('select00')
            M.wrap_menu(-1)
        elseif(m.key.down) then
            PlaySound('select00')
            M.wrap_menu(1)
        end
        local t_selected = t_ids[M.selected]
        local t_id = t_selected
        if(t_id == "res" or t_id == "language" or t_id == "se_volume" or t_id == "bgm_volume") then
            if (m.key.right) then
                PlaySound('select00')
                M.submenus[t_selected].wrap_menu(1)
            elseif (m.key.left) then
                PlaySound('select00')
                M.submenus[t_selected].wrap_menu(-1)
            end
            if (t_id == "language" and KeyIsPressed('shoot')) then
                PlaySound('ok00')
                M.submenus[t_selected]._select()
            end
        else
            if (KeyIsPressed("shoot")) then
                PlaySound('ok00')
                M.submenus[t_selected]._select()
            end
        end

        if(KeyIsPressed('spell')) then
            if(M.selected == #t_ids) then
                PlaySound('ok00')
                M.submenus[t_selected]._select()
            end
            PlaySound('cancel00')
            M.wrap_menu(#t_ids-M.selected)
        end
        coroutine.yield()
    end
end
function M._in()
    if IsValid(M.header) then
        Del(M.header)
    end
    if(not IsValid(M.desc_obj))then
        M.desc_obj = New(M.desc)
    end
    M.header = New(menu_header,320,480-25, "options")
    task.New(stage_init, function()
        M.desc_obj:transition(255)
        for _, obj in ipairs(M.obj_list) do
            task.New(stage_init,function()
                obj:_in()
            end)
            task.Wait(2)
        end
        task.Wait(60-20)
        M.obj_list[M.selected]:_select()
    end)
end
function M._out()
    Kill(M.header)
    M.desc_obj:transition(0)
    Del(M.desc_obj)
    task.New(stage_init, function()
        for _, obj in ipairs(M.obj_list) do
            task.New(stage_init,function()
                obj:_out()
            end)
            task.Wait(2)
        end
    end)
end

M.option = Class(object)
function M.option:init(t_id,id)
    self.scale = 0.65
    self.x = 640 + 250
    self.postx = M.getposition(id,0.75).x
    self.prex = self.x
    self.y = M.getposition(id,0.75).y
    self.bound = false
    self.text = t[t_id].text
    self.t_id = t_id
    self.id = id
    self._in = M.option._in
    self._out = M.option._out
    self._select = M.option._select
    self._unselect = M.option._unselect
    self._b = 128
    self.s_b = self._b
    self.layer = 0
    if(t_id ~= "return" and t_id ~= "apply" and t_id ~= "set_key" ) then
        self.x_off = 220
        self.x_ = self.x_off
        self.x_offs = self.x_off - 40
    else
        self.x_off = 0
        self.x_ = self.x_off
        self.x_offs = 0
    end
    if(t_id ~= "set_key") then
        self.other_render = M.submenus[t_id].render or voidfunc
    else
        self.other_render = voidfunc
    end
end
function M.option:frame()
    if (KeyIsDown("special")) then
        self.hscale = self.hscale + 1
    end
end
function M.option:render()
    SetFontState("menu","",Color(255,self._b,self._b,self._b))
    RenderText("menu", self.text, self.x - self.x_off/2, self.y, self.scale, 'center', "vcenter")
    SetFontState("menu","",Color(255,255,255,255))
    self:other_render()
end
function M.option:_in()
    local px = self.x
    local ex = self.postx
    for i=0, 1, 1/60 do
        self.x = Interpolate(px, ex, EaseOutCubic(i))
        task.Wait(1)
    end
end
function M.option:_out()
    local px = self.postx
    local ex = self.prex
    for i=0, 1, 1/60 do
        self.x = Interpolate(px, ex, EaseOutCubic(i))
        task.Wait(1)
    end
end
function M.option:_select()
    local px = self.x_off
    local ex = self.x_offs
    local pb = self._b
    local eb = 255
    for i=0, 1, 1/20 do
        self.x_off = Interpolate(px, ex, EaseOutCubic(i))
        self._b = Interpolate(pb, eb, EaseOutCubic(i))
        task.Wait(1)
    end
    self.x_off = ex
end
function M.option:_unselect()
    local px = self.x_off
    local ex = self.x_
    local pb = self._b
    local eb = self.s_b
    for i=0, 1, 1/20 do
        self.x_off = Interpolate(px, ex, EaseOutCubic(i))
        self._b = Interpolate(pb, eb, EaseOutCubic(i))
        task.Wait(1)
    end
    self.x_off = ex
end

M.desc = Class(object)
function M.desc:init()
    self.x = 320
    self.y = 30
    self.bound = false
    self.text = t[t_ids[M.selected]].desc
    self._a = 0
    self.transition = M.desc.transition
    self.layer = -1
end
function M.desc:frame()
    task.Do(self)
end
function M.desc:render()
    SetFontState("menu","",Color(self._a,255,255,255))
    RenderText("menu", self.text, self.x, self.y, 0.5, 'center', "vcenter")
end
function M.desc:transition(end_a)
    self.task = {}
    self.task[1] = task.New(self,function()
        local pa = self._a
        local ma = 0
        local ea = end_a
        for i=0, 1, 1/5 do
            self._a = Interpolate(pa, ma, EaseOutCubic(i))
            task.Wait(1)
        end
        self.text = t[t_ids[M.selected]].desc
        for i=0, 1, 1/15 do
            self._a = Interpolate(ma, ea, EaseOutCubic(i))
            task.Wait(1)
        end
    end)
end

function M.getposition(id, scale)
    return {
        x = 320,
        y = 480 - (50 + id * 40 * scale)
    }
end

function M.wrap_menu(change)
    local obj = M.obj_list[M.selected]
    task.New(stage_init, function()
        obj:_unselect()
    end)

    if(M.selected + change > #t_ids) then
        M.selected = 1
    elseif(M.selected + change < 1) then
        M.selected = #t_ids
    else
        M.selected = M.selected + change
    end

    M.desc_obj:transition(255)

    local obj2 = M.obj_list[M.selected]
    task.New(stage_init, function()
        obj2:_select()
    end)
end

local S = M.submenus.res
S.a = 255
S.res_table = M.resolutions[setting.res]
S.text = S.res_table[1] .. " x " .. S.res_table[2]
function S.wrap_menu(change)
    if(setting.res + change > #M.resolutions) then
        setting.res = 1
    elseif(setting.res + change < 1) then
        setting.res = #M.resolutions
    else
        setting.res = setting.res + change
    end
    task.New(stage_init, function()
        local pa = S.a
        local ma = 0
        local ea = 255
        for i=0, 1, 1/5 do
            S.a = Interpolate(pa, ma, EaseOutCubic(i))
            task.Wait(1)
        end
        S.res_table = M.resolutions[setting.res]
        S.text = S.res_table[1] .. " x " .. S.res_table[2]
        for i=0, 1, 1/15 do
            S.a = Interpolate(ma, ea, EaseOutCubic(i))
            task.Wait(1)
        end
    end)
end
function S:render()
    SetFontState("menu","",Color(S.a,255,255,255))
    RenderText("menu", S.text, self.x + self.x_off/2, self.y, self.scale, 'center', "vcenter")
    SetFontState("menu","",Color(255,255,255,255))
end

local S = M.submenus.windowed
function S._select()
    setting.windowed = not setting.windowed
end
function S:render()
    local tex = ternary(setting.windowed, "checkmark2", "checkmark1")
    Render(tex, self.x + self.x_off/2, self.y,0,0.5,0.5)
end

local S = M.submenus.usebosstheme
function S._select()
    setting.usebosstheme = not setting.usebosstheme
end
function S:render()
    local tex = ternary(setting.usebosstheme, "checkmark2", "checkmark1")
    Render(tex, self.x + self.x_off/2, self.y,0,0.5,0.5)
end

local S = M.submenus.loweffect
function S._select()
    setting.loweffect = not setting.loweffect
end
function S:render()
    local tex = ternary(setting.loweffect, "checkmark2", "checkmark1")
    Render(tex, self.x + self.x_off/2, self.y,0,0.5,0.5)
end


S = M.submenus.vsync
function S._select()
    setting.vsync = not setting.vsync
end
function S:render()
    local tex = ternary(setting.vsync, "checkmark2", "checkmark1")
    Render(tex, self.x + self.x_off/2, self.y,0,0.5,0.5)
end
S = M.submenus.apply
function S._select()
    local res = setting.res
    setting.resx = M.resolutions[res][1]
    setting.resy = M.resolutions[res][2]
    saveConfigure()
    ChangeVideoMode(setting.resx, setting.resy, setting.windowed, setting.vsync)
    ResetScreen3()
end

menu_bar_size = 170

CopyImage("se_volume","white")
local S = M.submenus.se_volume
function S.wrap_menu(change)
    if(not KeyIsDown("slow")) then
        change = change * 10
    end
    if(setting.sevolume + change > 100) then
        setting.sevolume = 100
    elseif(setting.sevolume + change < 0) then
        setting.sevolume = 0
    else
        setting.sevolume = setting.sevolume + change
    end
    SetSEVolume(setting.sevolume/100)
    PlaySound('select00', 0.3)
end
function S:render()
    local width = menu_bar_size * setting.sevolume / 100
    local x = self.x + self.x_off/2
    RenderRect("se_volume", x - menu_bar_size / 2, x - menu_bar_size / 2 + width, self.y - 8, self.y + 8)
end

CopyImage("bgm_volume","white")
local S = M.submenus.bgm_volume
function S.wrap_menu(change)
    if(not KeyIsDown("slow")) then
        change = change * 10
    end
    if(setting.bgmvolume + change > 100) then
        setting.bgmvolume = 100
    elseif(setting.bgmvolume + change < 0) then
        setting.bgmvolume = 0
    else
        setting.bgmvolume = setting.bgmvolume + change
    end

    SetBGMVolume(setting.bgmvolume/100)

    local E,bgm=EnumRes('bgm')
    for _,v in pairs(bgm) do
        if GetMusicState(v)=='playing' then
            SetBGMVolume(v,setting.bgmvolume/100)
        end
    end
    PlaySound('select00', 0.3)
end
function S:render()
    local width = menu_bar_size * setting.bgmvolume / 100
    local x = self.x + self.x_off/2
    RenderRect("bgm_volume", x - menu_bar_size / 2, x - menu_bar_size / 2 + width, self.y - 8, self.y + 8)
end

S = M.submenus.language
M.submenus.language.a = 255
M.submenus.language.text = setting.language
function S.wrap_menu(change)
    if(lstg.selected_lang + change > #lstg.lang_table) then
        lstg.selected_lang = 1
    elseif(lstg.selected_lang + change < 1) then
        lstg.selected_lang = #lstg.lang_table
    else
        lstg.selected_lang = lstg.selected_lang + change
    end
    task.New(stage_init, function()
        local pa = M.submenus.language.a
        local ma = 0
        local ea = 255
        for i=0, 1, 1/5 do
            M.submenus.language.a = Interpolate(pa, ma, EaseOutCubic(i))
            task.Wait(1)
        end
        M.submenus.language.text = lstg.lang_table[lstg.selected_lang]
        for i=0, 1, 1/15 do
            M.submenus.language.a = Interpolate(ma, ea, EaseOutCubic(i))
            task.Wait(1)
        end
    end)
end
function S:render()
    SetFontState("menu","",Color(M.submenus.language.a, self._b,self._b,self._b))
    RenderText("menu", M.submenus.language.text, self.x + self.x_off/2, self.y, self.scale, 'center', "vcenter")
    SetFontState("menu","",Color(self._b,self._b,self._b,self._b))
end
function S._select()
    setting.language = lstg.lang_table[lstg.selected_lang]
    csv_path = "Library\\text\\" .. setting.language .. "\\"
    LoadStrings()
end


S = M.submenus['return']
function S._select()
    saveConfigure()
    M._out()
    task.Wait(15)
    lstg.menu.title_screen._in()
    stage_init.stack:pop()
end