---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Zino Lath.
--- DateTime: 18/07/2021 01:02
---
local m = lstg.menu
local o = m.options
local M = o.submenus["set_key"]
M.obj_list = {}
M.selected = 1
local t = lstg.text.menu
local t_ids = {"up","left","right","down","shoot","spell","special","slow","default_key","return"}
function M._select()
    for id, text in ipairs(t_ids) do
        M.obj_list[id] = New(M.option,text,id)
    end
    M._in()
    task.Wait()
    while(true) do
        if(m.key.up) then
            PlaySound('select00')
            M.wrap_menu(-1)
        elseif(m.key.down) then
            PlaySound('select00')
            M.wrap_menu(1)
        end
        if(KeyIsPressed("shoot")) then
            local t_id = t_ids[M.selected]
            if t_id ~= "return" and t_id ~= "default_key" then
                PlaySound('ok00')
                M.change_key(M.selected)
            elseif t_id == "default_key" then
                PlaySound('cancel00')
                M.change_key_to_default()
            else
                break
            end
        end
        task.Wait(1)
    end
    M._out()
end

function M.change_key(id)
    local t_id = t_ids[id]
    local obj = M.obj_list[id]
    task.Wait(1)
    task.New(stage_init,function()
        local pr = obj._r
        local er = 60
        for i=0, 1, 1/10 do
            obj._r = Interpolate(pr, er, EaseOutCubic(i))
            task.Wait(1)
        end
    end)
    while (GetLastKey() == 0) do
        task.Wait(1)
    end
    setting.keys[t_id] = GetLastKey()
    task.New(stage_init,function()
        local pr = obj._r
        local er = 0
        for i=0, 1, 1/10 do
            obj._r = Interpolate(pr, er, EaseOutCubic(i))
            task.Wait(1)
        end
    end)
    task.Wait(10)
end
function M.change_key_to_default()
    local s = setting.keys
    local d = default_setting.keys
    for _, k in ipairs(t_ids) do
        if(k == "return" or k == "default_key") then break end
        s[k] = d[k]
    end
end

function M._in()
    if(M.bgobj == nil) then
        M.bgobj = New(M.bg)
    end
    task.New(stage_init, function()
        M.bgobj:_in()
    end)
    task.New(stage_init, function()
        for _, obj in ipairs(M.obj_list) do
            task.New(stage_init,function()
                obj:_in()
            end)
            task.Wait(2)
        end
        task.Wait(60-20)
        M.obj_list[M.selected]:_select()
    end)
end
function M._out()
    task.New(stage_init, function()
        M.bgobj:_out()
    end)
    task.New(stage_init, function()
        for _, obj in ipairs(M.obj_list) do
            task.New(stage_init,function()
                obj:_out()
            end)
            task.Wait(2)
        end
    end)
end
M.bg = Class(object)
function M.bg:init()
    self._a = 0
    self.layer = 1
    self._in = M.option._in
    self._out = M.option._out
end
function M.bg:render()
    SetImageState("white","",Color((self._a/255) * 200,0,0,0))
    RenderRect("white",0,640,0,480)
end
M.option = Class(object)
function M.option:init(t_id,id)
    self.scale = 0.65
    self.x = M.getposition(id,400).x
    self.y = M.getposition(id,400).y
    self.bound = false
    self.text = t[t_id].text
    self.t_id = t_id
    self.id = id
    self._in = M.option._in
    self._out = M.option._out
    self._select = M.option._select
    self._unselect = M.option._unselect
    self._a = 0
    self._b = 128
    self._r = 0
    self.s_b = self._b
    self.layer = 2
    if(t_id ~= "return" and t_id ~= "default_key" and t_id ~= "set_key" ) then
        self.x_off = 220
        self.x_ = self.x_off
        self.x_offs = self.x_off - 40
        self.other_render = M.render or voidfunc
    else
        self.x_off = 0
        self.x_ = self.x_off
        self.x_offs = 0
        self.other_render = voidfunc
    end
end
function M.option:frame()
    if (KeyIsDown("special")) then
        self.hscale = self.hscale + 1
    end
end
function M.option:render()
    SetFontState("menu","",Color(self._a,self._b,self._b - self._r,self._b - self._r))
    RenderText("menu", self.text, self.x - self.x_off/2, self.y, self.scale, 'center', "vcenter")
    self:other_render()
    SetFontState("menu","",Color(255,255,255,255))
end
function M.option:_in()
    local pa = self._a
    local ea = 255
    for i=0, 1, 1/60 do
        self._a = Interpolate(pa, ea, EaseOutCubic(i))
        task.Wait(1)
    end
end
function M.option:_out()
    local pa = self._a
    local ea = 0
    for i=0, 1, 1/60 do
        self._a = Interpolate(pa, ea, EaseOutCubic(i))
        task.Wait(1)
    end
end
function M.option:_select()
    local px = self.x_off
    local ex = self.x_offs
    local pb = self._b
    local eb = 255
    for i=0, 1, 1/20 do
        self.x_off = Interpolate(px, ex, EaseOutCubic(i))
        self._b = Interpolate(pb, eb, EaseOutCubic(i))
        task.Wait(1)
    end
    self.x_off = ex
end
function M.option:_unselect()
    local px = self.x_off
    local ex = self.x_
    local pb = self._b
    local eb = self.s_b
    for i=0, 1, 1/20 do
        self.x_off = Interpolate(px, ex, EaseOutCubic(i))
        self._b = Interpolate(pb, eb, EaseOutCubic(i))
        task.Wait(1)
    end
    self.x_off = ex
end
function M:render()
    RenderText("menu", KeyCodeToName()[setting.keys[self.t_id]], self.x + self.x_off/2, self.y, self.scale, 'center', "vcenter")
end
function M.getposition(id, scale)
    local ypos = (scale/#t_ids) * (#t_ids - id)
    return {
        x = 320,
        y = 240 - scale/2 + ypos
    }
end
function M.wrap_menu(change)
    local obj = M.obj_list[M.selected]
    task.New(stage_init, function()
        obj:_unselect()
    end)

    if(M.selected + change > #t_ids) then
        M.selected = 1
    elseif(M.selected + change < 1) then
        M.selected = #t_ids
    else
        M.selected = M.selected + change
    end

    local obj2 = M.obj_list[M.selected]
    task.New(stage_init, function()
        obj2:_select()
    end)
end